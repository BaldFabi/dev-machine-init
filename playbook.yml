---
- name: dev machine init
  hosts: localhost
  connection: local
  vars:
    node_version: 18
    go_version: 1.18
    gohugo_version: 0.98.0
    glow_version: 1.4.1
    terraform_docs_version: 0.16.0
    tfsec_version: 1.21.0
    migrate_version: 4.15.2
  tasks:
    - name: Upgrade system
      become: true
      apt:
        update_cache: true
        upgrade: dist

    - name: Install necessary packages
      become: true
      apt:
        pkg:
          - zsh
          - git
          - sshpass
          - ca-certificates
          - curl
          - apt-transport-https
          - gnupg
          - jq
          - python3-pip

    - name: Install or update starship
      become: true
      shell: sh -c "$(curl -fsSL https://starship.rs/install.sh)" -- -f

    - name: Download antigen
      get_url:
        url: https://git.io/antigen
        dest: ~/antigen.zsh

    - name: Get newest fzf version
      git:
        repo: https://github.com/junegunn/fzf.git
        dest: ~/.fzf
        depth: "1"

    - name: Install fzf
      shell: ~/.fzf/install --completion --no-update-rc --key-bindings

    - name: Create .config directory
      file:
        path: ~/.config
        state: directory

    - name: Copy config files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: files/home/.zshrc, dest: ~/.zshrc }
        - { src: files/home/.gitconfig, dest: ~/.gitconfig }
        - {
            src: files/home/.config/starship.toml,
            dest: ~/.config/starship.toml
          }

    - name: Copy vimrc.local
      become: true
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: files/etc/vim/vimrc.local, dest: /etc/vim/vimrc.local }

    - name: Change shell to zsh
      become: true
      user:
        name: "{{ ansible_user_id }}"
        shell: /bin/zsh

    - name: Add golang apt repo
      become: true
      apt_repository:
        repo: ppa:longsleep/golang-backports

    - name: "Add nodejs v{{ node_version }} repo"
      become: true
      shell: "curl -fsSL https://deb.nodesource.com/setup_{{ node_version }}.x | sudo -E bash -"

    - name: Add hashicorp repo key
      become: true
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg

    - name: Add hashicorp repo
      become: true
      apt_repository:
        repo: "deb https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"

    - name: "Download gohugo {{ gohugo_version }} deb package"
      get_url:
        url: "https://github.com/gohugoio/hugo/releases/download/v{{ gohugo_version }}/hugo_extended_{{ gohugo_version }}_Linux-64bit.deb"
        dest: /tmp/hugo.deb

    - name: "Install gohugo {{ gohugo_version }} binary"
      become: true
      apt:
        deb: /tmp/hugo.deb

    - name: Remove gohugo install package
      file:
        path: /tmp/hugo.deb
        state: absent

    - name: "Download glow {{ glow_version }} deb package"
      get_url:
        url: "https://github.com/charmbracelet/glow/releases/download/v{{ glow_version }}/glow_{{ glow_version }}_linux_amd64.deb"
        dest: /tmp/glow.deb

    - name: "Install glow {{ glow_version }} binary"
      become: true
      apt:
        deb: /tmp/glow.deb

    - name: Remove glow install package
      file:
        path: /tmp/glow.deb
        state: absent

    - name: Add microsoft repo key
      become: true
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc

    - name: Add microsoft repo
      become: true
      apt_repository:
        repo: "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ {{ ansible_distribution_release }} main"

    - name: Add kubernetes repo key
      become: true
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg

    - name: Add kubernetes repo
      become: true
      apt_repository:
        repo: "deb [arch=amd64] https://apt.kubernetes.io/ kubernetes-xenial main"

    - name: Install k9s
      shell: curl -sS https://webinstall.dev/k9s | bash

    - name: Install havener
      become: true
      shell: curl -sL https://raw.githubusercontent.com/homeport/havener/main/scripts/download-latest.sh | bash

    - name: Add helm repo key
      become: true
      apt_key:
        url: https://baltocdn.com/helm/signing.asc

    - name: Add helm repo
      become: true
      apt_repository:
        repo: "deb https://baltocdn.com/helm/stable/debian/ all main"

    - name: Install helm, kubectl, azure-cli, golang, nodejs, terraform, packer
      become: true
      apt:
        update_cache: true
        pkg:
          - helm
          - kubectl
          - azure-cli
          - "golang-{{ go_version }}"
          - nodejs
          - terraform
          - packer

    - name: "Set go binary to version {{ go_version }}"
      become: true
      file:
        src: /usr/lib/go-{{ go_version }}/bin/go
        dest: /usr/bin/go
        state: link

    - name: Autoremove unused packages
      become: true
      apt:
        autoremove: true

    - name: "Download terraform-docs {{ terraform_docs_version }} binary"
      get_url:
        url: "https://github.com/terraform-docs/terraform-docs/releases/download/v{{ terraform_docs_version }}/terraform-docs-v{{ terraform_docs_version }}-linux-amd64.tar.gz"
        dest: /tmp/terraform-docs.tar.gz

    - name: "Unarchive terraform-docs {{ terraform_docs_version }}"
      unarchive:
        src: /tmp/terraform-docs.tar.gz
        dest: /tmp

    - name: "move terraform-docs {{ terraform_docs_version }} to final destination"
      copy:
        src: /tmp/terraform-docs
        dest: "/home/{{ ansible_user_id }}/.local/bin"
        remote_src: true
        mode: "755"

    - name: Remove terraform-docs leftovers
      shell: rm -f /tmp/terraform-docs*

    - name: "Download tfsec {{ tfsec_version }}"
      get_url:
        url: "https://github.com/aquasecurity/tfsec/releases/download/v{{ tfsec_version }}/tfsec-linux-amd64"
        dest: "/home/{{ ansible_user_id }}/.local/bin/tfsec"
        mode: "755"

    - name: "Download migrate {{ migrate_version }}"
      get_url:
        url: "https://github.com/golang-migrate/migrate/releases/download/v{{ migrate_version }}/migrate.linux-amd64.deb"
        dest: /tmp

    - name: "Install migrate {{ migrate_version }}"
      become: true
      apt:
        deb: /tmp/migrate.linux-amd64.deb

    - name: Remove migrate install package
      file:
        path: /tmp/migrate.linux-amd64.deb
        state: absent

    - name: Install mkdocs and mkdocs-material
      pip:
        name: "{{ item }}"
        state: latest
      loop:
        - mkdocs
        - mkdocs-material
